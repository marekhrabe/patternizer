#!/usr/bin/env node
// Generated by CoffeeScript 1.7.1
(function() {
  var body, fs, outputPath, path, patternizer, pkg, pngparse, program, sourcePath;

  path = require('path');

  program = require('commander');

  pkg = require(path.resolve(__dirname, '..', 'package.json'));

  program.version(pkg.version).usage('<input.png> [output.pat]').option('-n, --name [Pattern Name]', 'optional pattern name').option('-i, --id [abcdefgh-ijkl-mnop-qrst-uvwxyz012345]', 'optional pattern id (must follow this format)').parse(process.argv);

  if (!program.args.length) {
    program.help();
  }

  fs = require('fs');

  sourcePath = path.resolve(program.args[0]);

  if (program.args.length === 2) {
    outputPath = path.resolve(program.args[1]);
  } else {
    outputPath = path.basename(sourcePath, path.extname(sourcePath)) + '.pat';
  }

  if (!fs.existsSync(sourcePath)) {
    console.error();
    console.error("  error: file does not exist " + sourcePath);
    console.error();
    process.exit(1);
  }

  try {
    body = fs.readFileSync(sourcePath);
  } catch (_error) {
    console.error();
    console.error("  error: file cannot be read " + sourcePath);
    console.error();
    process.exit(1);
  }

  pngparse = require('pngparse');

  patternizer = require('..');

  pngparse.parse(body, (function(_this) {
    return function(err, image) {
      var outputStream;
      if (err) {
        console.error();
        console.error("  error: cannot parse png file " + sourcePath);
        console.error();
        process.exit(1);
      }
      outputStream = fs.createWriteStream(outputPath);
      return patternizer({
        outputStream: outputStream,
        image: image,
        id: program.id || null,
        name: program.name || null,
        callback: function() {
          return outputStream.on('close', function() {
            console.log();
            console.log("  success: pattern created " + outputPath);
            return console.log();
          });
        }
      });
    };
  })(this));

}).call(this);
